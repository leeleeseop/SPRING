<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.zerock.goods.mapper.GoodsMapper">

	<!-- 상품 리스트 -->
	<select id="list" resultType="org.zerock.goods.vo.GoodsVO">
		select
			goods_no, goods_name,
			price, discount, discount_rate, hit, saved_rate,
			image_name
		from (
			select
				rownum rnum, goods_no, goods_name,
				price, discount, discount_rate, hit, saved_rate,
				image_name
			from (
				select
					 g.goods_no, g.goods_name,
					 p.price, p.discount, p.discount_rate, g.hit, saved_rate,
					 g.image_name
				from
					goods g, price p
				where
					(<!-- 일반 조건. -->
						<!-- 현재 판매되고 있는 물건 - 가격 정보가 현재 가격으로 존재한다. -->
						<![CDATA[
						sale_startDate <= trunc(sysdate)
						and trunc(sysdate) <= sale_endDate
						]]>
						<!-- 검색을 달아야 한다. -->
						<include refid="search" />
					)
					and
					(<!-- JOIN 조건. -->
						g.goods_no = p.goods_no
					)
					
				order by goods_no desc
			)
		)
		where rnum between #{startRow} and #{endRow}
	</select>

	<!-- 상품 리스트 페이지 처리를 위한 전체 데이터 개수 가져오기 -->
	<select id="getTotalRow" resultType="Long">
		select count(*)
		from goods
		<!-- 검색을 달아야한다. -->
		where 1=1
		<include refid="search" />
	</select>
	
	<!-- 상품 리스트의 검색 처리 -->
	<sql id="search">
<!-- 		<if test="word != null and word != ''.toString()"> -->
<!-- 			where -->
 			<!-- prefixOverrides="or" - 맨 앞에 or는 제거한다. -->
<!-- 			<trim prefixOverrides="or"> -->
<!-- 				'test' : 문자열(String), 't' : 문자(char) -> 문자열 - toString()사용  -->
<!-- 				<if test="key.indexOf('t') >= 0"> -->
<!-- 					or title like '%' || #{word} || '%' -->
<!-- 				</if> -->
<!-- 				<if test="key.indexOf('c') >= 0"> -->
<!-- 					or content like '%' || #{word} || '%' -->
<!-- 				</if> -->
<!-- 				<if test="key.indexOf('w') >= 0"> -->
<!-- 					or writer like '%' || #{word} || '%' -->
<!-- 				</if> -->
<!-- 			</trim> -->
<!-- 		</if> -->
	</sql>

	<!-- 상품 보기 조회수 1 증가 -->
	<!-- # {obj} 1. 변수의 이름, 2. vo의 getter 이름, 3. Map의 key -->
	<update id="increase">
		update goods set hit = hit + 1
		where no = #{no}
	</update>

	<!-- 상품 보기 -->
	<select id="view" resultType="org.zerock.goods.vo.GoodsVO">
		select no, title, content, writer, writeDate, hit
		from goods
		where no = #{no}
	</select>

	<!-- 상품 등록 -->
	<insert id="write">
		<!-- 먼저 GoodsVO의 no에 setter를 이용해서 시퀀스에서 받아온 번호를 세팅해 준다. -->
		<selectKey keyProperty="no" resultType="Long" order="BEFORE">
			select goods_seq.nextval from dual
		</selectKey>
		insert into goods(no, title, content, writer, pw)
		values(#{no}, #{title}, #{content}, #{writer}, #{pw})
	</insert>

	<!-- 상품 수정 -->
	<update id="update">
	<![CDATA[
		update goods
		set title = #{title}, content = #{content}, writer = #{writer}
		where no = ${no} and pw = #{pw}
	]]>
	</update>

	<!-- 상품 수정 -->
	<delete id="delete">
	<![CDATA[
		delete from goods
		where no = ${no} and pw = #{pw}
	]]>
	</delete>
	
</mapper>